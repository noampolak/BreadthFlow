name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        pip install poetry
        poetry install --with dev
    
    - name: Run code formatting check
      run: |
        poetry run black --version
        poetry run black --check . --config pyproject.toml
    
    # - name: Run linting
    #   run: |
    #     poetry run flake8 --version
    #     poetry run flake8 . --config .flake8
    
    # - name: Run security check
    #   run: |
    #     bandit -r . -f json -o bandit-report.json
    #     pip install safety
    #     safety check

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: breadthflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        pip install poetry
        poetry install --with dev
    
    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=junit.xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/breadthflow_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=junit-integration.xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/breadthflow_test
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests (Disabled - Backend Focus)
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    
    - name: Build frontend (test only)
      run: |
        cd frontend
        npm run build
    
    - name: Skip frontend tests
      run: |
        echo "Frontend tests disabled - focusing on backend ML pipeline"

  # E2E Tests (Simplified - Backend only)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        pip install poetry
        poetry install --with dev
    
    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
    
    - name: Run E2E tests
      run: |
        poetry run pytest tests/e2e/ -v --junitxml=junit-e2e.xml
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5433/breadthflow_test
        REDIS_URL: redis://localhost:6380
        API_URL: http://localhost:8006
    
    - name: Stop services
      run: |
        docker-compose -f docker-compose.test.yml down
      if: always()

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        pip install poetry
        poetry install --with dev
        pip install locust
    
    - name: Start services
      run: |
        docker-compose up -d
        sleep 30
    
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --headless -u 100 -r 10 -t 60s --html performance-report.html
      env:
        API_URL: http://localhost:8005
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.html
    
    - name: Stop services
      run: |
        docker-compose down
      if: always()

  # Security Tests
  security-tests:
    # runs-on: ubuntu-latest
    # steps:
    # - uses: actions/checkout@v4
    
    # - name: Set up Python
    #   uses: actions/setup-python@v5
    #   with:
    #     python-version: ${{ env.PYTHON_VERSION }}
    
    # - name: Install Python dependencies
    #   run: |
    #     pip install poetry
    #     poetry install --with dev
    #     pip install safety bandit
    
    # - name: Run security scan
    #   run: |
    #     bandit -r . -f json -o bandit-report.json
    #     safety check --json --output safety-report.json
    
    # - name: Upload security reports
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: security-reports
    #     path: |
    #       bandit-report.json
    #       safety-report.json

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push API image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/breadthflow-api:latest -f fastapi_app/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/breadthflow-api:latest

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

  # Notify on Failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [backend-tests, e2e-tests, performance-tests, security-tests]
    if: failure()
    steps:
    - name: Notify on failure
      run: |
        echo "One or more tests failed. Please check the logs."
        # Add your notification logic here (Slack, email, etc.)